// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from "./client";
import { client } from "./client.gen";
import type {
  Oauth2ExchangeslistexchangesData,
  Oauth2ExchangeslistexchangesResponses,
  Oauth2ExchangeurlgeturlData,
  Oauth2ExchangeurlgeturlResponses,
  OrganizationapikeygetapikeyinfoData,
  OrganizationapikeygetapikeyinfoErrors,
  OrganizationapikeygetapikeyinfoResponses,
  WalletdeleteData,
  WalletdeleteErrors,
  WalletdeleteResponses,
  WalletgetData,
  WalletgetErrors,
  WalletgetResponses,
  WalletlistlistwalletsData,
  WalletlistlistwalletsErrors,
  WalletlistlistwalletsResponses,
  WalletpingpingData,
  WalletpingpingErrors,
  WalletpingpingResponses,
  WallettransactionslisttransactionsData,
  WallettransactionslisttransactionsErrors,
  WallettransactionslisttransactionsResponses,
  WalletwithdrawbalancebalanceData,
  WalletwithdrawbalancebalanceErrors,
  WalletwithdrawbalancebalanceResponses,
  WalletwithdrawquoteidexecutewithdrawData,
  WalletwithdrawquoteidexecutewithdrawErrors,
  WalletwithdrawquoteidexecutewithdrawResponses,
  WalletwithdrawquotequotationData,
  WalletwithdrawquotequotationErrors,
  WalletwithdrawquotequotationResponses,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get URL
 *
 * Get OAuth2 authorization URL for exchange connection.
 */
export const oauth2Exchangeurlgeturl = <ThrowOnError extends boolean = false>(
  options: Options<Oauth2ExchangeurlgeturlData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    Oauth2ExchangeurlgeturlResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-wallet-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-ott-action-id",
        type: "apiKey",
      },
    ],
    url: "/v0/oauth2/{exchange}/url",
    ...options,
  });
};

/**
 * List Exchanges
 *
 * List supported exchanges for OAuth2 connections.
 */
export const oauth2Exchangeslistexchanges = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<Oauth2ExchangeslistexchangesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    Oauth2ExchangeslistexchangesResponses,
    unknown,
    ThrowOnError
  >({
    url: "/v0/oauth2/exchanges",
    ...options,
  });
};

/**
 * Delete
 *
 * Delete a connected exchange wallet.
 *
 * **Required API Key Scopes:** `read`, `delete`
 */
export const walletdelete = <ThrowOnError extends boolean = false>(
  options?: Options<WalletdeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    WalletdeleteResponses,
    WalletdeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-wallet-id",
        type: "apiKey",
      },
    ],
    url: "/v0/wallet",
    ...options,
  });
};

/**
 * Get
 *
 * Get wallet information and balances.
 *
 * **Required API Key Scopes:** `read`
 */
export const walletget = <ThrowOnError extends boolean = false>(
  options?: Options<WalletgetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WalletgetResponses,
    WalletgetErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-wallet-id",
        type: "apiKey",
      },
    ],
    url: "/v0/wallet",
    ...options,
  });
};

/**
 * Ping
 *
 * Test wallet connectivity and validate exchange API credentials. This endpoint verifies that the stored credentials are valid by making a test API call to the exchange.
 *
 * **Required API Key Scopes:** `read`
 */
export const walletpingping = <ThrowOnError extends boolean = false>(
  options?: Options<WalletpingpingData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WalletpingpingResponses,
    WalletpingpingErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-wallet-id",
        type: "apiKey",
      },
    ],
    url: "/v0/wallet/ping",
    ...options,
  });
};

/**
 * List Wallets
 *
 * List all connected exchange wallets.
 *
 * **Required API Key Scopes:** `read`
 */
export const walletlistlistwallets = <ThrowOnError extends boolean = false>(
  options?: Options<WalletlistlistwalletsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WalletlistlistwalletsResponses,
    WalletlistlistwalletsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
    ],
    url: "/v0/wallet/list",
    ...options,
  });
};

/**
 * List Transactions
 *
 * List transactions for a specific wallet or all wallets with filtering options.
 *
 * **Required API Key Scopes:** `read`
 */
export const wallettransactionslisttransactions = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WallettransactionslisttransactionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WallettransactionslisttransactionsResponses,
    WallettransactionslisttransactionsErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
    ],
    url: "/v0/wallet/transactions",
    ...options,
  });
};

/**
 * Balance
 *
 * Get withdrawable balances and supported networks.
 *
 * **Required API Key Scopes:** `read`
 */
export const walletwithdrawbalancebalance = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WalletwithdrawbalancebalanceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WalletwithdrawbalancebalanceResponses,
    WalletwithdrawbalancebalanceErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-wallet-id",
        type: "apiKey",
      },
    ],
    url: "/v0/wallet/withdraw/balance",
    ...options,
  });
};

/**
 * Quotation
 *
 * Get withdrawal quote with fees and estimates.
 *
 * **Required API Key Scopes:** `read`, `quote`
 */
export const walletwithdrawquotequotation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WalletwithdrawquotequotationData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    WalletwithdrawquotequotationResponses,
    WalletwithdrawquotequotationErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-wallet-id",
        type: "apiKey",
      },
    ],
    url: "/v0/wallet/withdraw/quote",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Withdraw
 *
 * Execute a withdrawal using a quote ID.
 *
 * **Required API Key Scopes:** `read`, `quote`, `withdrawal`
 */
export const walletwithdrawquoteidexecutewithdraw = <
  ThrowOnError extends boolean = false,
>(
  options: Options<WalletwithdrawquoteidexecutewithdrawData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    WalletwithdrawquoteidexecutewithdrawResponses,
    WalletwithdrawquoteidexecutewithdrawErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-wallet-id",
        type: "apiKey",
      },
    ],
    url: "/v0/wallet/withdraw/{quoteId}/execute",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get API Key Info
 *
 * Get information about the current API key, including its permissions and rate limit configuration.
 *
 * **ðŸ”’ Authentication:** This endpoint requires a valid API key.
 */
export const organizationapikeygetapikeyinfo = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<OrganizationapikeygetapikeyinfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OrganizationapikeygetapikeyinfoResponses,
    OrganizationapikeygetapikeyinfoErrors,
    ThrowOnError
  >({
    security: [
      {
        name: "x-bluvo-api-key",
        type: "apiKey",
      },
      {
        name: "x-bluvo-org-id",
        type: "apiKey",
      },
      {
        name: "x-bluvo-project-id",
        type: "apiKey",
      },
    ],
    url: "/v0/organization/api-key",
    ...options,
  });
};
